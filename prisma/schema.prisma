// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  firstName          String
  secondName         String
  hashedPassword     String
  email              String    @unique
  registrationNumber String    @unique
  userType           UserType
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  school             School?
  projects           Project[]
  recycle           Recycle[]
  drafts             Draft[]
}

model Project {
  projectId  Int             @id @default(autoincrement())
  title      String
  createdAt  DateTime        @default(now())
  ans1       String
  file1     String?
  ans2       String
  file2     String?
  ans3       String
  file3     String?
  ans4       String
  file4     String?
  school     School
  status     ProjectStatus   @default(PENDING)
  userId     Int
  user       User            @relation(fields: [userId], references: [id])
  updatedBy  String?
  moderatorName  String?
  comment    String?
  moderatorComment String?
  referredTo Reference[]     
}

model Reference {
  id         Int      @id @default(autoincrement())
  email      String
  projectId  Int
  project    Project  @relation(fields: [projectId], references: [projectId])
  createdAt  DateTime @default(now())

  @@unique([email, projectId])
}

enum UserType {
  ADMIN
  STUDENT
  SUPERADMIN
  MODERATOR
}

enum School {
  SONAS
  SASS
  SCI
  MEDICINE
  ENGINEERING
  LAW
}

enum ProjectStatus {
  PENDING
  ACCEPTED
  REJECTED
  REFERRED
}

enum UserStatus{
  ACTIVE
  INACTIVE
}

model Preuser {
  id                 Int       @id @default(autoincrement())
  firstName          String
  secondName         String
  hashedPassword     String
  email              String    @unique
  registrationNumber String    @unique
  userType           UserType
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  status             UserStatus @default(INACTIVE)

}

model Draft {
  projectId  Int             @id @default(autoincrement())
  title      String
  createdAt  DateTime        @default(now())
  ans1       String
  file1     String?
  ans2       String
  file2     String?
  ans3       String
  file3     String?
  ans4       String
  file4     String?
  school     School
  userId     Int
  user       User            @relation(fields: [userId], references: [id])

}

model Recycle {
  projectId  Int             @unique
  title      String
  created  DateTime        @default(now())
  createdAt  DateTime       
  ans1       String
  file1     String?
  ans2       String
  file2     String?
  ans3       String
  file3     String?
  ans4       String
  file4     String?
  school     School
  status     ProjectStatus   @default(PENDING)
  userId     Int
  user       User            @relation(fields: [userId], references: [id])
}
